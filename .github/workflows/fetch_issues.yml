name: Fetch Issue Details

on:
  schedule:
    - cron: '*/10 * * * *'  # Läuft alle 10 Minuten
  workflow_dispatch:

jobs:
  fetch_issue_details:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Issue Details from GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.PAGE_GITHUB }}
        run: |
          echo "==== Sende API-Anfrage ===="
          curl -X POST https://api.github.com/graphql \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d @- <<EOF | tee response.json
          {
            "query": "query GetIssueDetails(\$owner: String!, \$repo: String!, \$issueNumber: Int!) {
              repository(owner: \$owner, name: \$repo) {
                issue(number: \$issueNumber) {
                  title
                  number
                  url
                  state
                  createdAt
                  updatedAt
                  closedAt
                  body
                  author {
                    login
                    avatarUrl
                  }
                  assignees(first: 5) {
                    nodes {
                      login
                      avatarUrl
                    }
                  }
                  labels(first: 10) {
                    nodes {
                      name
                      color
                    }
                  }
                  milestone {
                    title
                    dueOn
                  }
                  projectItems(first: 5) {
                    nodes {
                      fieldValues(first: 10) {
                        nodes {
                          __typename
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            name
                            field {
                              ... on ProjectV2FieldCommon {
                                name
                              }
                            }
                          }
                          ... on ProjectV2ItemFieldTextValue {
                            text
                            field {
                              ... on ProjectV2FieldCommon {
                                name
                              }
                            }
                          }
                          ... on ProjectV2ItemFieldDateValue {
                            date
                            field {
                              ... on ProjectV2FieldCommon {
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }",
            "variables": {
              "owner": "twodarkk",
              "repo": "streamercards",
              "issueNumber": 29
            }
          }
          EOF

          echo "==== API-Response ausgeben ===="
          cat response.json

      - name: Process API Response and Create issues.json
        run: |
          jq 'if .data.repository.issues.nodes then 
            .data.repository.issues.nodes | map({
              title: .title,
              number: .number,
              url: .url,
              state: .state,
              created_at: .createdAt,
              updated_at: .updatedAt,
              author: {
                login: .author.login,
                avatar_url: .author.avatarUrl
              },
              assignees: ( [ .assignees.nodes[]? | { login: .login, avatar_url: .avatarUrl } ] // [] ),
              labels: ( [ .labels.nodes[]? | { name: .name, color: .color } ] // [] ),
              milestone: (if .milestone then { title: .milestone.title, due_on: .milestone.dueOn } else null end),
              status: ( [ .projectItems.nodes[].fieldValues.nodes[]? | select(.field.name == "Status") | .name ] | join(", ") // "Unbekannt"),
              priority: ( [ .projectItems.nodes[].fieldValues.nodes[]? | select(.field.name == "Priorität") | .name ] | join(", ") // "Keine"),
              start_date: ( [ .projectItems.nodes[].fieldValues.nodes[]? | select(.field.name == "Start-Datum") | .date ] | join(", ") // "Kein Datum")
            })
          elif .data.repository.issue then 
            [{
              title: .data.repository.issue.title,
              number: .data.repository.issue.number,
              url: .data.repository.issue.url,
              state: .data.repository.issue.state,
              created_at: .data.repository.issue.createdAt,
              updated_at: .data.repository.issue.updatedAt,
              author: {
                login: .data.repository.issue.author.login,
                avatar_url: .data.repository.issue.author.avatarUrl
              },
              assignees: ( [ .data.repository.issue.assignees.nodes[]? | { login: .login, avatar_url: .avatarUrl } ] // [] ),
              labels: ( [ .data.repository.issue.labels.nodes[]? | { name: .name, color: .color } ] // [] ),
              milestone: (if .data.repository.issue.milestone then { title: .data.repository.issue.milestone.title, due_on: .data.repository.issue.milestone.dueOn } else null end),
              status: ( [ .data.repository.issue.projectItems.nodes[].fieldValues.nodes[]? | select(.field.name == "Status") | .name ] | join(", ") // "Unbekannt"),
              priority: ( [ .data.repository.issue.projectItems.nodes[].fieldValues.nodes[]? | select(.field.name == "Priorität") | .name ] | join(", ") // "Keine"),
              start_date: ( [ .data.repository.issue.projectItems.nodes[].fieldValues.nodes[]? | select(.field.name == "Start-Datum") | .date ] | join(", ") // "Kein Datum")
            }]
          else [] end' response.json > issues.json
        
          echo "==== Generierte issues.json ===="
          cat issues.json





      - name: Commit and Push Issues Data
        run: |
          if [ -s issues.json ]; then
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add issues.json
            git commit -m "Updated issue details JSON" || echo "No changes to commit"
            git push
          else
            echo "issues.json ist leer, nichts zu committen."
          fi
