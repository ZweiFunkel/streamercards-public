name: Fetch Issues for Public Scrumboard

on:
  schedule:
    - cron: '*/10 * * * *'  # Läuft alle 10 Minuten
  workflow_dispatch:

jobs:
  fetch_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Issues from GitHub Project
        env:
          GITHUB_TOKEN: ${{ secrets.PAGE_GITHUB }}
        run: |
          echo "==== Sende API-Anfrage ===="
          curl -X POST \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d @- <<EOF | tee response.json
          {
            "query": "query FetchProjectIssues(\$owner: String!, \$repo: String!) {
              repository(owner: \$owner, name: \$repo) {
                issues(first: 100, states: OPEN) {
                  nodes {
                    title
                    number
                    url
                    state
                    createdAt
                    updatedAt
                    closedAt
                    author {
                      login
                      avatarUrl
                    }
                    assignees(first: 5) {
                      nodes {
                        login
                        avatarUrl
                      }
                    }
                    labels(first: 10) {
                      nodes {
                        name
                        color
                      }
                    }
                    milestone {
                      title
                      dueOn
                    }
                    projectItems(first: 5) {
                      nodes {
                        fieldValues(first: 10) {
                          nodes {
                            __typename
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                            ... on ProjectV2ItemFieldTextValue {
                              text
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                            ... on ProjectV2ItemFieldDateValue {
                              date
                              field {
                                ... on ProjectV2FieldCommon {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }",
            "variables": {
              "owner": "twodarkk",
              "repo": "streamercards"
            }
          }
          EOF
          
          echo "==== API-Response ausgeben ===="
          cat response.json

      - name: Process API Response and Create issues.json
        run: |
          jq 'if .data.repository.issues.nodes then .data.repository.issues.nodes | map({
              title: .title,
              number: .number,
              url: .url,
              state: .state,
              created_at: .createdAt,
              updated_at: .updatedAt,
              closed_at: .closedAt,
              author: { login: .author.login, avatar_url: .author.avatarUrl },
              assignees: [.assignees.nodes[] | { login: .login, avatar_url: .avatarUrl }],
              labels: [.labels.nodes[] | { name: .name, color: .color }],
              milestone: if .milestone then { title: .milestone.title, due_on: .milestone.dueOn } else null end,
              status: (.projectItems.nodes[].fieldValues.nodes[] | select(.field.name == "Status") | .name),
              priority: (.projectItems.nodes[].fieldValues.nodes[] | select(.field.name == "Priorität") | .name),
              start_date: (.projectItems.nodes[].fieldValues.nodes[] | select(.field.name == "Start-Datum") | .date)
          }) else [] end' response.json > issues.json
          
          echo "==== Generierte issues.json ===="
          cat issues.json

      - name: Commit and Push Issues Data
        run: |
          if [ -s issues.json ]; then
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add issues.json
            git commit -m "Updated issues JSON" || echo "No changes to commit"
            git push
          else
            echo "issues.json ist leer, nichts zu committen."
          fi
